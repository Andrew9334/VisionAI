import psycopg2
import logging
from psycopg2.extras import execute_values

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

class PostgresDB:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL"""

    def __init__(self, host, user, port, password, db_name):
        self.host = host
        self.user = user
        self.port = port
        self.password = password
        self.db_name = db_name
        self.conn = self.__connect()

    def __connect(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = psycopg2.connect(
                database=self.db_name,
                user=self.user,
                password=self.password,
                host=self.host,
                port=self.port
            )
            logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            return conn
        except psycopg2.Error as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")

    def check_connection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        if self.conn is None or self.conn.closed:
            logging.warning("‚ö†Ô∏è –ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
            self.conn = self.__connect()

    def create_table(self, schema):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø–æ —Å—Ö–µ–º–µ (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)"""
        table_name = schema['table_name']
        columns = schema['columns']
        foreign_keys = schema.get('foreign_keys', [])
        unique_constraints = schema.get('constraints', [])

        if self.check_table_exists(table_name):
            logging.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ '{table_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫
        columns_sql = ", ".join([f"{col} {dtype}" for col, dtype in columns.items()])

        # –î–æ–±–∞–≤–ª—è–µ–º PRIMARY KEY, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ 'id'
        if "id" in columns:
            columns_sql = f"id SERIAL PRIMARY KEY, {columns_sql}"

        # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
        fk_sql = ", ".join([
            f"FOREIGN KEY ({col}) REFERENCES {ref_table}({ref_col})"
            for col, ref_table, ref_col in foreign_keys
        ]) if foreign_keys else ""

        # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        unique_sql = f", UNIQUE ({', '.join(unique_constraints)})" if unique_constraints else ""

        create_query = f"""
        CREATE TABLE IF NOT EXISTS {table_name} (
            {columns_sql}
            {fk_sql if fk_sql else ""}
            {unique_sql}
        );
        """

        try:
            self.check_connection()
            with self.conn as conn:
                with conn.cursor() as cursor:
                    cursor.execute(create_query)
                    logging.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{table_name}' —Å–æ–∑–¥–∞–Ω–∞ (–µ—Å–ª–∏ –µ—ë –Ω–µ –±—ã–ª–æ).")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã '{table_name}': {e}")

    def create_indexes(self, table_name, indexes):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        if not indexes:
            logging.warning("‚ö†Ô∏è –ù–µ—Ç –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
            return

        try:
            self.check_connection()
            with self.conn as conn:
                with conn.cursor() as cursor:
                    for index in indexes:
                        index_name = f"idx_{index[0]}" if len(index) == 1 else index[1]
                        cursor.execute(f"CREATE INDEX IF NOT EXISTS {index_name} ON {table_name} ({index[0]});")
                        logging.info(f"‚úÖ –ò–Ω–¥–µ–∫—Å '{index_name}' —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ '{index[0]}' –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}'.")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")

    def check_table_exists(self, table_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.check_connection()
            with self.conn as conn:
                with conn.cursor() as cursor:
                    cursor.execute(f"SELECT EXISTS (SELECT FROM pg_tables WHERE tablename = %s);", (table_name,))
                    return cursor.fetchone()[0]
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã '{table_name}': {e}")
            return False

    def save_to_db(self, table_name, data):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        if not data:
            logging.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏.")
            return

        if not self.check_table_exists(table_name):
            logging.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        columns = data[0].keys()
        values = [[row[col] for col in columns] for row in data]

        insert_query = f"""
            INSERT INTO {table_name} ({', '.join(columns)})
            VALUES %s
            ON CONFLICT (id) DO UPDATE SET
            {', '.join([f"{col} = EXCLUDED.{col}" for col in columns if col != 'id'])};
        """

        try:
            self.check_connection()
            with self.conn as conn:
                with conn.cursor() as cursor:
                    execute_values(cursor, insert_query, values)
                conn.commit()
                logging.info(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ {len(data)} —Å—Ç—Ä–æ–∫ –≤ '{table_name}'.")
        except Exception as e:
            conn.rollback()
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ '{table_name}': {e}")

    def read_from_db(self, table_name, columns=None):
        """–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        if not self.check_table_exists(table_name):
            logging.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return []

        columns_sql = ", ".join(columns) if columns else "*"
        query = f"SELECT {columns_sql} FROM {table_name};"

        try:
            self.check_connection()
            with self.conn as conn:
                with conn.cursor() as cursor:
                    cursor.execute(query)
                    rows = cursor.fetchall()
                    return rows if rows else []
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ '{table_name}': {e}")
            return []

    def delete_from_db(self, table_name, condition):
        """–£–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ —É—Å–ª–æ–≤–∏—é"""
        if not self.check_table_exists(table_name):
            logging.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        query = f"DELETE FROM {table_name} WHERE {condition};"

        try:
            self.check_connection()
            with self.conn as conn:
                with conn.cursor() as cursor:
                    cursor.execute(query)
                    conn.commit()
                    logging.info(f"‚úÖ –ó–∞–ø–∏—Å–∏ –∏–∑ '{table_name}' —É–¥–∞–ª–µ–Ω—ã –ø–æ —É—Å–ª–æ–≤–∏—é: {condition}.")
        except Exception as e:
            conn.rollback()
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ '{table_name}': {e}")

    def close_connection(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π"""
        if self.conn:
            self.conn.close()
            logging.info("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ.")
